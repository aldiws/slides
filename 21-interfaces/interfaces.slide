Interfaces with Go

Kenneth Shaw
ken@brank.as

30 October 2018

Tags: golang, interfaces

* GoJakarta

.background gopher-720p.png

* First...

Big thank you to [[https://www.xendit.com][XendIt]] for hosting this event!

Please join the us online if you're not yet a member!

- Meetup: [[https://www.meetup.com/GoJakarta][meetup.com/GoJakarta]] 
- Telegram: [[https://t.me/gophers_id][t.me/gophers_id]]
- Facebook: [[https://www.facebook.com/groups/GophersID][facebook.com/groups/GophersID]]

* About GoJakarta

GoJakarta is a monthly meetup focused on the Go programming language, but also incorporates other topics related to Go such as deploying Go apps to the cloud.

Slides available at [[https://gophers.id/slides][gophers.id/slides]]:

    $ go get -u gophers.id/slides

* Presenters + Contact

Looking for presenters! We need presenters! If you would like to do a presentation, have a suggestion for a topic, or have a location we can use!

Contact us: 

Ken Shaw

- [[mailto:kenshaw@gmail.com][kenshaw@gmail.com]]
- [[tel:+62-811-168-1586][+62-811-168-1586]]

Dimas Yudha Prawira

- [[mailto:prawira.dimas.yudha@gmail.com][prawira.dimas.yudha@gmail.com]]
- [[tel:+62-812-2021-5924][+62-812-2021-5924]]


* Next Meetup

November 29th, 2018, topic/location: TBA

* Interfaces with Go

* What are Interfaces

An _interface_type_ is defined as a set of method signatures:

    type Printer interface {
        Print(string) error
    }

A value of a interface type `Printer` can hold any value that has the method receiver for `Print()`:

    type MyPrinter struct {}
    func (p *MyPrinter) Print(s string) error { /* ... */ }

Interfaces are similar to interfaces in other languages, but Go types do not need to declare that they satisfy a interface. Instead, in Go, types that simply implement the interface (as above) can be used anywhere a `Printer` is required:

    func MustPrint(p Printer, val string) {
        if err := p.Print(value); err != nil {
            panic(fmt.Sprintf("could not print %q: %v", val err))
        }
    }

* Another Example

Interfaces can have one or more methods:

    type InjectExecutor interface {
        Inject()
        Execute(io.Writer) error
    }

    type InjectHandler struct {
        vals []string
    }
    func (ih *InjectHandler) Inject(vals ...string) { 
        ih.vals = append(ih.vals, vals...)
    }
    func (ih *InjectHandler) Execute(w io.Writer) error {
        if w == nil {
            w = os.Stdout 
        }
        return fmt.Fprintf(w, "values", ih.vals...)
    }

    func NewInjectHandler() InjectExecutor {
        return &InjectHandler{}
    }

* Third Example

    type Peeler interface {
        Peel()
        Name() string
    }

    type Apple struct { }
    func (a Apple) Peel()
    func (a Apple) Name() string { return "Apple" }

    type Pear struct { }
    func (p Pear) Peel()
    func (p Pear) Name() string { return "Pear" }

    func PeelFruit(z Peeler) {
        fmt.Printf("Peeling: %s", p.Name())
        z.Peel()
    }

    func main() {
        fruitToPeel := []Peeler{Apple{}, Pear{}}
        for _, p := range fruitToPeel {
            PeelFruit(p)
        }
    }

* What is the empty `interface{}`

The interface type that specifies zero methods is known as the _empty_interface_:

    interface{}

Since all types have zero (or more) methods, all values in Go can satisfy the empty interface. As such, a variable with the type `interface{}` can hold any value:

    var p interface{}

    p = &MyPrinter{}
    p = 10
    p = "hello!"

Note: empty interface is not the same as `void *`:

- No casting required to assign to the empty interface
- The empty interface is a pointer to a Go value, where as `void *` is a memory address 
- The empty interface has both a type and a value

* Comparisons

The closest comparison is Java, however:

- Go does not have an inheritance heirarchy in the way that OO languages do
- Go's interfaces are implicit, Java (and related languages) require an explicit `implements` (or similiar)

Since Go does not have "objects" (it has "types"), Go's interfaces can be more flexible. 

- Any type (including the base types) can have method receivers declared on them
- Allows much more composable type system

* Pikeverbs

The bigger the interface, the weaker the abstraction.

`interface{}` says nothing.

* Where are interfaces used?

When separating the implementation from the interface definition:

- Service definitions / generators (gRPC)
- Test harnesses (mocks); dependency injections
- Handlers, such as `http.Handler`
- Type compositions

* General Rules

Interfaces should have (usually) be no more than one or two methods:

    type error interface {
        Error() string
    }

Interfaces should be named as -er of the primary method:

    type Stringer interface {
        String() string
    }

* General Rules (cont'd)

Packages should return concrete types, but accept interfaces:

    type Printer interface { 
        Print() error
    }
    type Result struct { /* ... */ }

    type MyPrinter struct { /* ... */ }
    func (m *MyPrinter) Print() error { /* ... */ }

    func NewMyPrinter() *MyPrinter { /* ... */ }

    func PrintSomething(p Printer) (Result, error) { /* ... */ }

* Use in Standard Library

- `error` interface

- `http.Handler`
    type Handler interface {
            ServeHTTP(http.ResponseWriter, *http.Request)
    }

- `io.Writer` + `io.Reader` + others

- Many other locations

* Advanced Use: Package Sentinel Errors

Since entire standard library recognizes `error`'s, can create package-level, sentinel errors that are immutable:

    type Error string

    func (err Error) Error() string {
       return string(err)
    }

    const (
        ErrCouldNotReadHost Error = "could not read host"
    )

* Advanced Use: Package Sentinel Errors (cont'd)

These can be tailored to contain more complex, meta information such as error codes, or tracing/logging implementations:

    type Error int

    const MyError Error = 15

    var errorCodeMap = map[Error]string{
        MyError: "my error",
    }

    func (err Error) Error() string {
        return errorCodeMap[int(err)]
    }

    func (err Error) Code() int { return int(err) }

* Advanced Use: Middleware

Using a interface in the standard library, allows "middleware" to pass along HTTP requests in a "chain":

    type Logger struct { next http.Handler } 

    func (l *Logger) ServeHTTP(res http.ResponseWriter, req *http.Request) {
        l.logSomething(res, req) 
        l.next(res, req)
    }

    func main() {
        l := &Logger{myMux}
        http.ListenAndServe(":9090", l)
    }

* Advanced Use: Middleware (cont'd)

Since any type in Go can have a method receiver on it, it allows for this common pattern:

    type Handler {
        ServeHTTP(ResponseWriter, *Request)
    }

    type HandlerFunc func(ResponseWriter, Request)
    func (f HandlerFunc) ServeHTTP(res ResponseWriter, req *Request) {
        f(res, req)
    }

And then:

    type Logger struct { next http.Handler } 

    func main() {
        l := &Logger{http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
            /* ... do something ... */    
        })}
    }

* Brankas

Brankas is hiring for all positions:

- Backend Developers & SREs
- Frontend Developers
- Project Managers
- Business Analysts

Check out [[https://brank.as/about][https://brank.as/about]]
